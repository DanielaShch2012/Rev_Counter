#include <libopencm3>

struct can_rx_msg {
	uint32_t std_id;
	uint32_t ext_id;
	uint8_t ide;
	uint8_t rtr;
	uint8_t dlc;
	uint8_t data[8];
	uint8_t fmi;
};

static void gpio_setup(void)
{
        /* Enable Alternate Function clock. */
	rcc_periph_clock_enable(RCC_AFIO);

	/* Enable GPIOB clock. */
	rcc_periph_clock_enable(RCC_GPIOB);

	/* Preconfigure LEDs. */
	gpio_set(PB0, PB1, PB2,PB13, PB14, PB15);  /* LED green off */
	gpio_set(PC6, PC10, PC11);  /* LED blue off */
	gpio_set(PC7, PC8, PC9); //LED red off

	/* Configure LED GPIOs. */
	gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_50_MHZ,
		      GPIO_CNF_OUTPUT_PUSHPULL, GPIO0, GPIO1, GPIO2, GPIO13, GPIO14, GPIO15); /*configuring green LED*/
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_50_MHZ,
		      GPIO_CNF_OUTPUT_PUSHPULL, GPIO6, GPIO10, GPIO11); /*configuring blue LED*/
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_50_MHZ,
		      GPIO_CNF_OUTPUT_PUSHPULL, GPIO7, GPIO8, GPIO9); /*configuring red LED*/

	/* Configure PB4 as GPIO. */
	AFIO_MAPR |= AFIO_MAPR_SWJ_CFG_FULL_SWJ_NO_JNTRST;

}

//leds are outputs

static void can_setup(void)
{
	/* Enable peripheral clocks. */
	rcc_periph_clock_enable(RCC_AFIO);
	rcc_periph_clock_enable(RCC_GPIOB);
	rcc_periph_clock_enable(RCC_GPIOC);
	rcc_periph_clock_enable(RCC_CAN1);

	AFIO_MAPR |= AFIO_MAPR_CAN1_REMAP_PORTB;

	/* Configure CAN pin: RX (input pull-up). */
	gpio_set_mode(GPIO_BANK_CAN1_PB_RX, GPIO_MODE_INPUT,
		      GPIO_CNF_INPUT_PULL_UPDOWN, GPIO_CAN1_PB_RX);
	gpio_set(GPIO_BANK_CAN1_PB_RX, GPIO_CAN1_PB_RX);

	/* Configure CAN pin: TX. */
	gpio_set_mode(GPIO_BANK_CAN1_PB_TX, GPIO_MODE_OUTPUT_50_MHZ,
		      GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO_CAN1_PB_TX);

	/* NVIC setup. */
	nvic_enable_irq(NVIC_USB_LP_CAN_RX0_IRQ);
	nvic_set_priority(NVIC_USB_LP_CAN_RX0_IRQ, 1);

	/* Reset CAN. */
	can_reset(CAN1);

	/* CAN cell init.
	 * Setting the bitrate to 1MBit. APB1 = 32MHz,
	 * prescaler = 2 -> 16MHz time quanta frequency.
	 * 1tq sync + 9tq bit segment1 (TS1) + 6tq bit segment2 (TS2) =
	 * 16time quanto per bit period, therefor 16MHz/16 = 1MHz
	 */
	if (can_init(CAN1,
		     false,           /* TTCM: Time triggered comm mode? */
		     true,            /* ABOM: Automatic bus-off management? */
		     false,           /* AWUM: Automatic wakeup mode? */
		     false,           /* NART: No automatic retransmission? */
		     false,           /* RFLM: Receive FIFO locked mode? */
		     false,           /* TXFP: Transmit FIFO priority? */
		     CAN_BTR_SJW_1TQ,
		     CAN_BTR_TS1_9TQ,
		     CAN_BTR_TS2_6TQ,
		     2,
		     false,
		     false))             /* BRP+1: Baud rate prescaler */
	{
		gpio_clear(GPIOB, GPIO0, GPIO1, GPIO2, GPIO13, GPIO14, GPIO15); /* LED green on */
		gpio_set(GPIOC, GPIO6, GPIO10, GPIO11); /*LED blue off*/
		gpio_set(GPIOC, GPIO7, GPIO8, GPIO9);   /* LED red off */

		/* Die because we failed to initialize. */
		while (1)
			__asm__("nop");
	}

	/* CAN filter 0 init. */
	can_filter_id_mask_32bit_init(
				0x2000,     /* Filter ID */
				0,     /* CAN ID */
				0,     /* CAN ID mask */
				0,     /* FIFO assignment (here: FIFO0) */
				true); /* Enable the filter. */

	/* Enable CAN RX interrupt. */
	can_enable_irq(CAN1, CAN_IER_FMPIE0);
}

void sys_tick_handler(void)
{
	static uint8_t data[8] = {0, 1, 2, 0, 0, 0, 0, 0};

	/* We call this handler every 1ms so every 1ms = 0.001s
	 * resulting in 1000Hz message rate.
	 */

	/* Transmit CAN frame. */
	data[0]++;
	if (can_transmit(CAN1,
			 0,     /* (EX/ST)ID: CAN ID */
			 false, /* IDE: CAN ID extended? */
			 false, /* RTR: Request transmit? */
			 8,     /* DLC: Data length */
			 data) == -1)
	{
		gpio_set(GPIOB, GPIO0, GPIO1, GPIO2, GPIO13, GPIO14, GPIO15);   /* LED green off */
		gpio_set(GPIOC, GPIO6, GPIO10, GPIO11); /*LED blue off*/
		gpio_clear(GPIOC, GPIO7, GPIO8, GPIO9); /* LED red on */
	}
}

int NUM_LEDS = 12

void usb_lp_can_rx0_isr(void)
{
	uint32_t id;
	bool ext, rtr;
	uint8_t fmi, length, data[8];

	can_receive(CAN1, 0, false, &id, &ext, &rtr, &fmi, &length, data, NULL);

	/*if (data[0] & 0x40)
		gpio_clear(GPIOB, GPIO0, GPIO1, GPIO2, GPIO13, GPIO14, GPIO15);
	else
		gpio_set(GPIOB, GPIO0, GPIO1, GPIO2, GPIO13, GPIO14, GPIO15);

	if (data[0] & 0x80)
		gpio_clear(GPIOC, GPIO7, GPIO8, GPIO9);
	else
		gpio_set(GPIOC, GPIO7, GPIO8, GPIO9); */

	can_fifo_release(CAN1, 0);
}

void gotFrame2000(CAN_FRAME *frame){
	RPM = ((frame->data.byte[1]<<8)| frame->data.byte[0]); //extract rpm
}

//update LEDS to show current RPM
void update_rpm_leds(int level){
	//set RPM LEDs
	float percent = (1.0*level) / configuration.max_rpm;
	int num_leds = percent * NUM_LEDS;
	set_leds(num_leds);
}


int main(void)
{
	rcc_clock_setup_pll(&rcc_hsi_configs[RCC_CLOCK_HSI_64MHZ]);
	gpio_setup();
	can_setup();
	systick_setup();
  gotFrame2000();
  update_rpm_leds();

	while (1); /* Halt. */

	return 0;
}
